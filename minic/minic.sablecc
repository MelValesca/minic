Language minic;
Lexer
d = '0'..'9';
w = 'a'..'z';
int = d+;
id = w(d|w)*;
blank = (#9 | #10 | #14 | #32)+;
comment = ('//'|'#') (Any - #10)* | Shortest '/*' Any* '*/';
Ignored blank, comment;

Parser
prog = funs ;
funs = {many:} funs fun |
       {none:} ;

fun = type id '(' params ')' block ;

params = {many:} params ',' param |
         {one:} param |
         {none:} ;

param = type id;

block = '{' stmts '}' ;
stmts = {some:} stmts stmt |
        {none:} ;
stmt = {var:} type id '=' exp ';' |
       {assign:} id '=' exp ';' |
       {if:} 'if' '(' exp ')' block |
       {ifelse:} 'if' '(' exp ')' block 'else' [else:]block |
       {while:} 'while' '(' exp ')' block |
       {printint:} 'printint' '(' exp ')' ';' |
       {printbool:} 'printbool' '(' exp ')' ';' |
       {println:} 'println' '(' ')' ';' |
       {call:} id '(' args ')' ';' |
       {return:} 'return' exp ';' ;

args = {many:} args ',' exp |
       {one:} exp |
       {none:};

type = {int:} 'int' |
       {bool:} 'bool' ;

exp = {add:} [left:]exp '+' [right:]exp |
      {sub:} [left:]exp '-' [right:]exp |
      {mul:} [left:]exp '*' [right:]exp |
      {and:} [left:]exp '&&' [right:]exp |
      {or:} [left:]exp '||' [right:]exp |
      {not:} '!' exp |
      {int:} int |
      {true:} 'true' |
      {false:} 'false' |
      {par:} '(' exp ')' |
      {lt:} [left:]exp '<' [right:]exp |
      {var:} id |
      {call:} id '(' args ')';

   Priority
      Left not;
      Left mul;
      Left add, sub;
      Left lt;
      Left and;
      Left or;
